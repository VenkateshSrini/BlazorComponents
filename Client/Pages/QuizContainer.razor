@page "/QuizContainer"
@using System.Text.Json;
@inject HttpClient httpClient
@inject NavigationManager UriHelper
@if (currentQuiz == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (currentQuiz.AnswerType == ResponseType.MultiLine)
    {
        <MultiChoiceQuestion NextQuestionOrDone="@buttonText" QuestionSet="@currentQuiz" OnCompleted="RecordResponse" />
    }
    else if (currentQuiz.AnswerType == ResponseType.SingleLine)
    {
        <SingleChoiceQuestion NextQuestionOrDone="@buttonText" QuestionSet="@currentQuiz" OnCompleted="RecordResponse" />
    }
    @if (CanDisplayCourseResut)
    {
        <label>You Percentage</label> <label>@(ScoredPercentage*100)</label>
        <br />
        <label>Pass Percentage</label> <label>@(PassPercentage*100)</label>
        <br />
        <label>You Final result</label> <label>@FinalResult</label>
    }
}
@code {
    private CourseQuiz courseQuiz = new CourseQuiz();
    private QAndA currentQuiz;
    private int currentQuizIdx = 0;
    private string buttonText;
    private Dictionary<int, bool> UserResponses = new Dictionary<int, bool>();
    private bool CanDisplayCourseResut = false;
    private const decimal PassPercentage = 0.70M;
    private decimal ScoredPercentage;
    private string FinalResult;
    protected override async Task OnInitializedAsync()
    {
        var baseUri = UriHelper.BaseUri.ToString();
        courseQuiz = await httpClient.GetFromJsonAsync<CourseQuiz>($"{baseUri}api/QAndA?courseId=Coo1");
        courseQuiz.Quiz.Shuffle();
        ManageQuizQuestion();

    }
    private void ManageQuizQuestion()
    {
        CanDisplayCourseResut = false;
        if (currentQuizIdx < courseQuiz.Quiz.Count)
        {
            currentQuiz = courseQuiz.Quiz[currentQuizIdx];
            buttonText = "NextQuestion";
        }

        if (currentQuizIdx == courseQuiz.Quiz.Count - 1)
            buttonText = "Done";


        if ((currentQuizIdx > 0) && (currentQuizIdx < courseQuiz.Quiz.Count))
            StateHasChanged();
        else if ((currentQuizIdx > 0) && (currentQuizIdx >= courseQuiz.Quiz.Count))
            ComputeFinalResult();

    }
    public void RecordResponse(bool result)
    {
        UserResponses[currentQuiz.QuestionID] = result;
        currentQuizIdx++;
        ManageQuizQuestion();
    }
    private void ComputeFinalResult()
    {
        CanDisplayCourseResut = true;
        decimal correctCount = 0.0M;
        decimal totalQuizQuestion = courseQuiz.Quiz.Count;
        foreach (var curQuiz in courseQuiz.Quiz)
        {
            var resultValues = UserResponses[curQuiz.QuestionID];
            if (resultValues)
                correctCount++;
        }
        ScoredPercentage = (correctCount / totalQuizQuestion) ;
        if (ScoredPercentage > PassPercentage)
            FinalResult = "Pass";
        else
            FinalResult = "Fail";
    }
}
