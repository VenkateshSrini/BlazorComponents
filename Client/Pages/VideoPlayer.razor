@page "/videoplayer/{key}"
@using System.Threading.Tasks;
@using BlazorComponent.Client.InterApp;
@using System.Timers;
@inject Blazored.LocalStorage.ILocalStorageService localStore;

@inject BlazorComponent.Client.InterApp.Services.IStateManagement viewState;



<div>
    <BlazoredVideo VideoEventOptions="options" TimeUpdateEvent="OnTimeUpdate"
                   class="w-100"
                   style="max-width:800px;"
                   controls="controls">
        <source src="@videoSource" type="@videoType" />
    </BlazoredVideo>
</div>
@code {
    [Parameter]
    public string Key { get; set; }
    public string videoSource { get; set; }
    
    Dictionary<VideoEvents, VideoStateOptions> options = new Dictionary<VideoEvents, VideoStateOptions>();
    VideoState videoState;
    public string videoType { get; set; }
    protected override void OnInitialized()
    {
        videoSource = viewState.GetState<string>("videoURL");
        videoType = viewState.GetState<string>("videoType");
        
        options[VideoEvents.TimeUpdate] = new VideoStateOptions { CurrentTime = true, Duration = true };

    }
  
    void OnTimeUpdate(VideoState state)
    {
        videoState = state;
        var videoDetails = new videoDetails
        {
            duration = Convert.ToSingle(videoState.Duration),
            remainingTime = Convert.ToSingle(videoState.Duration) - Convert.ToSingle(videoState.CurrentTime)
        };
        localStore.SetItemAsync<videoDetails>(Key, videoDetails).GetAwaiter().GetResult();

    }

}
