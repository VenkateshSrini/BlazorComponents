@using System.Collections.Specialized;

<table width="100%" style="border-color:black;border-style:solid;border-width:1px">
    <tr style="border-bottom: 1px solid black">
        <td width="30%">
            <label for="Questions">Enter Question below</label>
        </td>
        <td>
            <textarea style="width:100%;box-sizing:border-box;height:100%" id="Questions" rows="3" @bind="qAndA.QuestionText"></textarea>
        </td>
    </tr>

    <tr style="border-bottom: 1px solid black">
        <td colspan="2" >
            <table width ="70%"   style="align-content:center">
                <tr>
                    <td align="center" width="50%">
                        Answer Key
                    </td>
                    <td align="center" width="50%">
                        Answer text
                    </td>
                </tr>
                @foreach (var answer in qAndA.Answers)
                {
                    <tr>
                        <td >
                            <input type="text" @bind="answer.AnswerKey" style="width:100%;box-sizing: border-box;height:100%"/>
                        </td>
                        <td >
                            <input type="text" @bind="answer.AnswerText" style="width:100%;box-sizing: border-box;height:100%" multiple/>
                        </td>
                        <td colspan="2" width="100%">
                            <button class="btn btn-primary"
                                    @onclick="@(e => AddAnswerPlaceholder(answer,true))">
                                +
                            </button>
                        </td>
                        <td>
                            <button class="btn btn-primary"
                                    @onclick="@(e => RemoveRow(answer))">
                                -
                            </button>
                        </td>
                       
                    </tr>
                }
            </table>
        </td>
    </tr>
    <tr style="border-bottom: 1px solid black">
        <td>
            <label for="QuestionType">Choose the Answer Type</label>
        </td>
        <td>
            <select @bind="qAndA.AnswerType" id="QuestionType">
                <option value="@ResponseType.SingleLine">Single</option>
                <option value="@ResponseType.MultiLine">Multiple</option>
                <option value="@ResponseType.FreeText">Free Text</option>
            </select>
        </td>
    </tr>
    <tr style="border-bottom: 1px solid black">
        <td>
            <label for="Answerkeys">Enter the solutions as comma separated option</label>
        </td>
        <td>
            <input type="text" @bind="answerOptions" id="Answerkeys" />
        </td>
    </tr>
    <tr style="border-bottom: 1px solid black">
        <td colspan="2" align="center">
            <button class="btn btn-primary" @onclick="@(async()=>await SubmitQAndA())">Add answer</button>
        </td>
    </tr>
</table>
<br/>
@code {
    [Parameter]
    public EventCallback<QAndA> OnCompleted { get; set; }

    private QAndA qAndA { get; set; } = new QAndA();
    private string answerOptions { get; set; }

    private int NumberOfRowsAdded = 1;
    protected override void OnInitialized()
    {
        ClearControl();

    }
    private void AddAnswerPlaceholder(Answer answer, bool AddNewRow)
    {

        //qAndA.Answers.Add(answer);
        if (AddNewRow)
        {
            var newAnswerLine = new Answer();
            var lastAnsIdx = qAndA.Answers.Max(answer => answer.AnswerId);
            newAnswerLine.AnswerId = lastAnsIdx + 1;
            qAndA.Answers.Add(newAnswerLine);
            NumberOfRowsAdded++;
            StateHasChanged();
        }
    }
    private void RemoveRow(Answer answer)
    {
        if (qAndA.Answers.Any())
        {
            qAndA.Answers.Remove(answer);
            StateHasChanged();
        }
    }
    private async Task SubmitQAndA()
    {
        qAndA.AnswerKeys = new List<string>();
        qAndA.AnswerKeys.AddRange(answerOptions.Split(","));
        //qAndA.Answers.TrimExcess();
        if (OnCompleted.HasDelegate)
            await OnCompleted.InvokeAsync(qAndA);
    }
    public void ClearControl()
    {
        qAndA = new QAndA();
        var answer = new Answer();
        answer.AnswerId = 1;
        qAndA.Answers.Add(answer);
    }

}
